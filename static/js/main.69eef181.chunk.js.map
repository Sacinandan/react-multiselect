{"version":3,"sources":["utils/index.ts","components/custom-button/CustomButton.tsx","components/custom-button/index.ts","components/custom-input/CustomInput.tsx","components/custom-input/index.ts","components/option-pill/OptionPill.tsx","components/option-pill/index.ts","containers/multiselect-add-form/MultiSelectAddForm.tsx","containers/multiselect-add-form/index.ts","components/options-list/OptionsList.tsx","components/options-list/index.ts","containers/multiselect/MultiSelect.tsx","containers/multiselect/index.ts","containers/multiselects-box/MultiSelectsBox.tsx","containers/multiselects-box/index.ts","data.ts","App.tsx","index.tsx"],"names":["Button","initializeOptions","options","optionId","map","option","id","value","isActive","CustomButton","children","ownProps","CustomInput","selectId","handleChange","name","fixedLabel","className","type","onChange","e","length","OptionPill","handleRemoveSelectedOption","onClick","MultiSelectAddForm","newSelectId","hideAddForm","addNewMultiSelect","useState","hidden","newSelect","setNewSelect","inputValues","setInputValues","setOptionId","wasAttempt","isFocused","inputStatus","setInputStatus","checkValues","newOptionName","split","trim","prevState","addNewOption","target","normalizedValue","word","substring","toUpperCase","join","replace","normalizeText","handleClearInput","preventDefault","handlePressKey","keyCode","Backspace","currentSelect","pop","removeLastOption","filter","key","onKeyDown","onFocus","onBlur","handleAddNewMultiSelect","OptionsList","handleSelectOption","handleSetActive","handleBlur","onMouseEnter","MultiSelect","selectedOptionsList","inputValue","handleToggleOptionsList","handleFocusInput","filteredOptions","RegExp","toLowerCase","test","activeOptionIdx","findActiveOptionIdx","findIndex","tabIndex","select","MultiSelectsBox","data","initializeMultiSelects","multiSelectsList","setMultiSelectsList","setSelectedOptionsList","initialState","initializeInputValues","setInputValue","setHideAddForm","toggleOptionsList","isHidden","clearInputValues","currentValuesList","addOptionToSelected","moveOnTheOptionsList","neighbors","previewOption","currentOption","nextOption","currentSelectsList","Up","Down","relatedTarget","values","Enter","Esc","currentSelectedOptionsList","removeLastSelectedOption","activateOption","splice","arr1","arr2","arr1El","arr2El","App","onSubmit","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.69eef181.chunk.js","sourcesContent":["import { SelectData, InputValue, MultiSelectElement, Option, SelectedElement, InitialValuesState } from '../models'\r\n\r\n/**\r\n *\r\n * @param {SelectData[]}  data  array of multi-selects data\r\n * @return MultiSelectElement[] array of multi-selects\r\n * @description Initial MultiSelectsBox data\r\n */\r\nexport const initializeMultiSelects = (data: SelectData[]): MultiSelectElement[] => {\r\n  let selectId: number = 0\r\n\r\n  return data.map(select => ({\r\n    id: selectId++,\r\n    name: select.name,\r\n    options: initializeOptions(select.options),\r\n    hidden: true\r\n  }))\r\n}\r\n\r\n/**\r\n *\r\n * @param {string[]}  options array of options for multi-select\r\n * @return Option[] array of options\r\n * @description Initial MultiSelectsBox options data\r\n */\r\nexport const initializeOptions = (options: string[]): Option[] => {\r\n  let optionId: number = 0\r\n\r\n  return options.map(option => ({\r\n    id: optionId++,\r\n    value: option,\r\n    isActive: false\r\n  }))\r\n}\r\n\r\n/**\r\n *\r\n * @param {MultiSelectElement[]}  initialState array of options for multi-select\r\n * @return SelectedElement[] array of objects (selected options with id of multi-select)\r\n * @description Initial MultiSelectsBox options data\r\n */\r\nexport const initializeSelectedList = (initialState: MultiSelectElement[]): SelectedElement[] => initialState\r\n  .map(({ id }) => ({ id, options: [] }))\r\n\r\n/**\r\n *\r\n * @param {MultiSelectElement[]}  initialState array of multi-selects\r\n * @return : InputValue[] array of input values\r\n * @description Initial Inputs for MultiSelectsBox\r\n */\r\nexport const initializeInputValues = (initialState: MultiSelectElement[]): InputValue[] => initialState\r\n  .map(({ id }) => ({ id, value: '' }))\r\n\r\n/**\r\n *\r\n * @return {MultiSelectElement} clear new multi-select\r\n * @description Initial state for new multi-select\r\n */\r\nexport const initializeSelectState = (): MultiSelectElement => ({\r\n  id: 0,\r\n  name: '',\r\n  options: [],\r\n  hidden: true\r\n})\r\n/**\r\n *\r\n * @return {InitialValuesState} clear new multi-select\r\n * @description Initial inputs for create new multi-select\r\n */\r\nexport const initializeValuesState = (): InitialValuesState => ({\r\n  name: '',\r\n  option: ''\r\n})\r\n\r\n/**\r\n *\r\n * @param {Option[]} arr1 array of all options\r\n * @param {Option[]} arr2 array of selected options\r\n * @return {Option[]} array of options\r\n * @description filter and remove selected options\r\n */\r\nexport const filterArrays = (arr1: Option[], arr2: Option[]): Option[] => arr1.filter((arr1El) => !arr2.filter(arr2El => arr2El.id === arr1El.id).length)\r\n\r\n/**\r\n *\r\n * @param {string} value of text for fix\r\n * @return {string} string of text\r\n * @description rewrite text for capitalize first letters and remove spaces\r\n */\r\nexport const normalizeText = (value: string): string => {\r\n  return value.split(' ')\r\n    .map(word => word.substring(0, 1).toUpperCase() + word.substring(1)).join(' ')\r\n    .replace(/ +(?= )/g,'')\r\n}\r\n/**\r\n *\r\n * @description Enum for keyboard codes\r\n * @readonly\r\n * @enum {number}\r\n * @type {number}\r\n */\r\nexport enum Button {\r\n  Backspace = 8,\r\n  Enter = 13,\r\n  Esc = 27,\r\n  Up = 38,\r\n  Down = 40\r\n}\r\n","import React, { ButtonHTMLAttributes, FC, MouseEvent, ReactNode } from 'react'\r\n\r\ninterface IProps extends ButtonHTMLAttributes<HTMLButtonElement> {\r\n  children: ReactNode\r\n  onClick?: (e: MouseEvent<HTMLButtonElement>) => void\r\n}\r\n\r\nconst CustomButton: FC<IProps> = ({children,...ownProps}) => (\r\n  <button {...ownProps}>\r\n    {children}\r\n  </button>\r\n)\r\n\r\nexport default CustomButton\r\n","import CustomButton from './CustomButton'\r\nimport './CustomButton.scss'\r\n\r\nexport default CustomButton\r\n","import React, { ChangeEvent, FC, InputHTMLAttributes,  ReactNode } from 'react'\r\n\r\ninterface IProps extends InputHTMLAttributes<HTMLInputElement> {\r\n  children: ReactNode\r\n  selectId: number\r\n  name: string\r\n  value: string\r\n  fixedLabel: boolean\r\n  handleChange: (e: ChangeEvent<HTMLInputElement>, selectId: number) => void\r\n}\r\n\r\nconst CustomInput: FC<IProps> = ({\r\n                                   children,\r\n                                   selectId,\r\n                                   handleChange,\r\n                                   name,\r\n                                   value,\r\n                                   fixedLabel,\r\n                                   ...ownProps\r\n                                 }) => (\r\n  <div className='group'>\r\n    <input\r\n      className='form-input'\r\n      type='text'\r\n      name={ name }\r\n      onChange={(e) => handleChange(e, selectId) }\r\n      value={ value }\r\n      { ...ownProps }\r\n    />\r\n\r\n    { name &&\r\n    <label\r\n      className={ `${ value.length || fixedLabel ? 'shrink' : '' } form-input-label` }\r\n    >\r\n      { name }\r\n    </label>\r\n    }\r\n\r\n    { children }\r\n  </div>\r\n)\r\n\r\nexport default CustomInput\r\n","import CustomInput from './CustomInput';\r\nimport './CustomInput.scss';\r\n\r\nexport default CustomInput;\r\n","import React, { FC, MouseEvent } from 'react'\r\n\r\ninterface IProps {\r\n  selectId: number\r\n  optionId: number\r\n  value: string\r\n  handleRemoveSelectedOption: (e: MouseEvent<HTMLSpanElement>, selectId: number, optionId: number) => void\r\n}\r\n\r\nconst OptionPill: FC<IProps> = ({\r\n                                  selectId,\r\n                                  optionId,\r\n                                  value,\r\n                                  handleRemoveSelectedOption\r\n                                }) => (\r\n  <div className='selected-option'>\r\n    { value }\r\n    <span\r\n      className='selected-option__btn-remove'\r\n      onClick={ (e) => handleRemoveSelectedOption(e, selectId, optionId) }\r\n    >\r\n              &times;\r\n            </span>\r\n  </div>\r\n)\r\n\r\nexport default OptionPill\r\n","import OptionPill from './OptionPill'\r\nimport './OptionPill.scss'\r\n\r\nexport default OptionPill\r\n","import React, { ChangeEvent, FC, KeyboardEvent, MouseEvent, useState } from 'react'\r\nimport { InitialValuesState, InputStatus, MultiSelectElement } from '../../models'\r\nimport {\r\n  Button, initializeOptions,\r\n  initializeSelectState,\r\n  initializeValuesState,\r\n  normalizeText\r\n} from '../../utils'\r\n\r\nimport CustomButton from '../../components/custom-button'\r\nimport CustomInput from '../../components/custom-input'\r\nimport OptionPill from '../../components/option-pill'\r\n\r\ninterface IProps {\r\n  newSelectId: number\r\n  hideAddForm: boolean\r\n  addNewMultiSelect: (newSelect: MultiSelectElement) => void\r\n}\r\n\r\nconst MultiSelectAddForm: FC<IProps> = ({\r\n                                          newSelectId,\r\n                                          hideAddForm,\r\n                                          addNewMultiSelect\r\n                                        }) => {\r\n  const [ newSelect, setNewSelect ] = useState<MultiSelectElement>(initializeSelectState())\r\n  const [ inputValues, setInputValues ] = useState<InitialValuesState>(initializeValuesState())\r\n  const [ optionId, setOptionId ] = useState<number>(0)\r\n  const [ inputStatus, setInputStatus ] = useState<InputStatus>({\r\n    wasAttempt: false,\r\n    isFocused: false\r\n  })\r\n\r\n  const removeLastOption = (): void => {\r\n    const currentSelect: MultiSelectElement = { ...newSelect }\r\n    currentSelect.options.pop()\r\n    setNewSelect(currentSelect)\r\n  }\r\n\r\n  const addNewOption = (value: string): void => {\r\n    setNewSelect(prevState => ({\r\n      ...prevState,\r\n      options: [\r\n        ...prevState.options,\r\n        {\r\n          id: optionId,\r\n          value,\r\n          isActive: false\r\n        }\r\n      ]\r\n    }))\r\n\r\n    setOptionId(optionId + 1)\r\n  }\r\n\r\n  const checkValues = (name: string, value: string): void => {\r\n\r\n    if (name === 'Options') {\r\n      const newOptionName: string[] = value.split(', ')\r\n\r\n      if (newOptionName.length > 1) {\r\n        if (newOptionName[0].trim()) addNewOption(newOptionName[0])\r\n\r\n        setInputValues(({ name }) => ({\r\n          name,\r\n          option: ''\r\n        }))\r\n      }\r\n    } else {\r\n      setNewSelect(prevState => ({\r\n        ...prevState,\r\n        name: value\r\n      }))\r\n    }\r\n  }\r\n\r\n  const handleChange = (e: ChangeEvent<HTMLInputElement>, selectId: number): void => {\r\n    const { value, name } = e.target\r\n    const normalizedValue = normalizeText(value)\r\n\r\n    setInputValues(prevState => ({\r\n      ...prevState,\r\n      [name === newSelect.name || name === 'Name' ? 'name' : 'option']: normalizedValue\r\n    }))\r\n\r\n    checkValues(name, normalizedValue)\r\n  }\r\n\r\n  const handleClearInput = (e: MouseEvent<HTMLButtonElement>, name: string): void => {\r\n    e.preventDefault()\r\n\r\n    setInputValues(prevState => ({\r\n      ...prevState,\r\n      [name === newSelect.name || name === 'Name' ? 'name' : 'option']: ''\r\n    }))\r\n\r\n    if (name === 'option') {\r\n      setNewSelect(prevState => ({\r\n        ...prevState,\r\n        options: []\r\n      }))\r\n    } else {\r\n      setNewSelect(prevState => ({\r\n        ...prevState,\r\n        name: ''\r\n      }))\r\n    }\r\n  }\r\n\r\n  const handlePressKey = (e: KeyboardEvent<HTMLInputElement>): void => {\r\n    if (e.keyCode === Button.Backspace && !inputValues.option.trim()) {\r\n      removeLastOption()\r\n    }\r\n  }\r\n\r\n  const handleRemoveSelectedOption = (e: MouseEvent<HTMLSpanElement>,\r\n                                      selectId: number,\r\n                                      optionId: number): void => {\r\n    setNewSelect({\r\n      ...newSelect,\r\n      options: newSelect.options.filter(({ id }) => id !== optionId)\r\n    })\r\n  }\r\n\r\n  const handleAddNewMultiSelect = (e: MouseEvent<HTMLButtonElement>,\r\n                                   newSelect: MultiSelectElement): void => {\r\n    e.preventDefault()\r\n\r\n    if (newSelect.name.trim() && newSelect.options.length) {\r\n      addNewMultiSelect({\r\n        ...newSelect,\r\n        id: newSelectId,\r\n        options: initializeOptions(newSelect.options.map(({ value }) => value))\r\n      })\r\n\r\n      setInputValues(initializeValuesState())\r\n      setNewSelect(initializeSelectState())\r\n    }\r\n\r\n    setInputStatus({ wasAttempt: true, isFocused: false })\r\n  }\r\n\r\n  return (\r\n    hideAddForm ? null :\r\n      <div className='modal-box'>\r\n        <div className='multi-select-add-form'>\r\n          <h2 className='header__title'>NEW SELECT</h2>\r\n          <div\r\n            className='multi-select'\r\n          >\r\n            <div className='selected-options-box'>\r\n              <CustomInput\r\n                selectId={ newSelectId }\r\n                name={ newSelect.name.trim() ? newSelect.name : 'Name' }\r\n                handleChange={ handleChange }\r\n                value={ inputValues.name }\r\n                fixedLabel={ !!inputValues.name.trim() }\r\n                children={ null }\r\n              />\r\n            </div>\r\n\r\n            <div className=\"control-box\">\r\n              { inputValues.name.trim() ?\r\n                <CustomButton\r\n                  className='btn-remove'\r\n                  onClick={ (e) => handleClearInput(e, inputValues.name) }\r\n                >\r\n                  &times;\r\n                </CustomButton>\r\n                : null }\r\n            </div>\r\n\r\n            <div className=\"status-box\">\r\n              { inputStatus.wasAttempt\r\n                ? newSelect.name.trim() || inputValues.name.trim()\r\n                  ? <strong className='success'>&#10003;</strong>\r\n                  : <strong className='attention'>&times;</strong>\r\n                : null }\r\n            </div>\r\n          </div>\r\n\r\n          <div className='multi-select'>\r\n            <div className='selected-options-box'>\r\n              { newSelect.options.map(({ id, value }) =>\r\n                <OptionPill\r\n                  key={ id }\r\n                  selectId={ 0 }\r\n                  optionId={ id }\r\n                  value={ value }\r\n                  handleRemoveSelectedOption={ handleRemoveSelectedOption }\r\n                />\r\n              ) }\r\n\r\n              <CustomInput\r\n                selectId={ newSelectId }\r\n                name='Options'\r\n                handleChange={ handleChange }\r\n                value={ inputValues.option }\r\n                fixedLabel={ !!inputValues.option.trim() || !!newSelect.options.length }\r\n                children={ null }\r\n                onKeyDown={ (e) => handlePressKey(e) }\r\n                onFocus={ () => setInputStatus(prevState => ({ ...prevState, isFocused: true })) }\r\n                onBlur={ () => setInputStatus(prevState => ({ ...prevState, isFocused: false })) }\r\n              />\r\n            </div>\r\n\r\n            <div className=\"control-box\">\r\n              { newSelect.options.length || inputValues.option.trim() ?\r\n                <CustomButton\r\n                  className='btn-remove'\r\n                  onClick={ (e) => handleClearInput(e, 'option') }\r\n                >\r\n                  &times;\r\n                </CustomButton>\r\n                : null }\r\n            </div>\r\n\r\n            <div className=\"status-box\">\r\n              { inputStatus.wasAttempt\r\n                ? newSelect.options.length\r\n                  ? <strong className='success'>&#10003;</strong>\r\n                  : <strong className='attention'>&times;</strong>\r\n                : null }\r\n            </div>\r\n          </div>\r\n\r\n          { inputStatus.isFocused &&\r\n          <em className='tooltip'>\r\n            Separate options with a comma and space\r\n          </em>\r\n          }\r\n\r\n          <CustomButton\r\n            className='form__btn--submit'\r\n            onClick={ (e) => handleAddNewMultiSelect(e, newSelect) }\r\n          >\r\n            ADD\r\n          </CustomButton>\r\n        </div>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default MultiSelectAddForm\r\n","import MultiSelectAddForm from './MultiSelectAddForm'\r\nimport './MultiselectAddForm.scss'\r\n\r\nexport default MultiSelectAddForm\r\n","import React, { FC, FocusEvent, MouseEvent } from 'react'\r\nimport { Option } from '../../models'\r\n\r\ninterface IProps {\r\n  selectId: number\r\n  options: Option[]\r\n  handleSelectOption: (e: MouseEvent<HTMLLIElement>, id: number, optionId: number) => void\r\n  handleSetActive: (e: MouseEvent<HTMLLIElement>, id: number, optionId: number) => void\r\n  handleBlur: (e: FocusEvent<HTMLUListElement | HTMLInputElement | HTMLButtonElement>, selectId: number) => void\r\n}\r\n\r\nconst OptionsList: FC<IProps> = ({\r\n                                   selectId,\r\n                                   options,\r\n                                   handleSelectOption,\r\n                                   handleSetActive,\r\n                                   handleBlur\r\n                                 }) => (\r\n  <ul\r\n    className='options-list'\r\n    onBlur={ (e) => handleBlur(e, selectId) }\r\n  >\r\n    { options.length\r\n      ? options.map(({ id, value, isActive }) => (\r\n        <li className={ `option${ isActive ? ' active' : '' }` }\r\n            key={ id }\r\n            value={ value }\r\n            onClick={ (e) => handleSelectOption(e, selectId, id) }\r\n            onMouseEnter={ (e) => handleSetActive(e, selectId, id) }\r\n        >\r\n          { value }\r\n        </li>)\r\n      )\r\n      : <p className='message'>All options have been selected</p> }\r\n  </ul>\r\n)\r\n\r\nexport default OptionsList\r\n","import OptionsList from './OptionsList'\r\nimport './OptionsList.scss'\r\n\r\nexport default OptionsList\r\n","import React, { ChangeEvent, FC, FocusEvent, KeyboardEvent, MouseEvent } from 'react'\r\nimport { InputValue, MultiSelectElement, SelectedElement } from '../../models'\r\n\r\nimport CustomInput from '../../components/custom-input'\r\nimport OptionsList from '../../components/options-list'\r\nimport CustomButton from '../../components/custom-button'\r\nimport OptionPill from '../../components/option-pill'\r\n\r\ninterface IProps extends MultiSelectElement {\r\n  selectedOptionsList: SelectedElement[]\r\n  inputValue: InputValue[]\r\n  handleChange: (e: ChangeEvent<HTMLInputElement>, selectId: number) => void\r\n  handleToggleOptionsList: (e: MouseEvent<HTMLButtonElement>, selectId: number) => void\r\n  handleSelectOption: (e: MouseEvent<HTMLLIElement>, selectId: number, optionId: number) => void\r\n  handleRemoveSelectedOption: (e: MouseEvent<HTMLSpanElement>, selectId: number, optionId: number) => void\r\n  handleSetActive: (e: MouseEvent<HTMLLIElement>, selectId: number, optionId: number) => void\r\n  handleFocusInput: (e: ChangeEvent<HTMLInputElement>, selectId: number) => void\r\n  handleClearInput: (e: MouseEvent<HTMLButtonElement>, selectId: number) => void\r\n  handlePressKey: (e: KeyboardEvent<HTMLDivElement>, selectId: number, neighbors: number[]) => void\r\n  handleBlur: (e: FocusEvent<HTMLUListElement | HTMLInputElement | HTMLButtonElement>, selectId: number) => void\r\n}\r\n\r\nconst MultiSelect: FC<IProps> = ({\r\n                                 id,\r\n                                 name,\r\n                                 selectedOptionsList,\r\n                                 options,\r\n                                 hidden,\r\n                                 inputValue,\r\n                                 handleChange,\r\n                                 handleToggleOptionsList,\r\n                                 handleFocusInput,\r\n                                 handleClearInput,\r\n                                 handleSelectOption,\r\n                                 handleSetActive,\r\n                                 handlePressKey,\r\n                                 handleBlur,\r\n                                 handleRemoveSelectedOption\r\n                               }) => {\r\n  const filteredOptions = inputValue[id].value.trim()\r\n    ? options.filter(option => RegExp(inputValue[id].value\r\n      .toLowerCase()).test(option.value.toLowerCase()))\r\n    : options\r\n\r\n  let activeOptionIdx: number = -2      //  less then -1 for deactivate all options\r\n\r\n  const findActiveOptionIdx = (): number => {\r\n    activeOptionIdx = filteredOptions.findIndex((option) => option.isActive)\r\n\r\n    if (activeOptionIdx === -1) {       //  findIndex return -1 if all options are inactive\r\n      if (filteredOptions.length) {\r\n        filteredOptions[0].isActive = true\r\n      }\r\n    }\r\n\r\n    return activeOptionIdx\r\n  }\r\n\r\n  if (filteredOptions.length) {\r\n    findActiveOptionIdx()\r\n  }\r\n\r\n  const findActiveOptionAndNeighbours = (): number[] => {\r\n    if (filteredOptions.length && activeOptionIdx !== -2) {\r\n      findActiveOptionIdx()\r\n\r\n      const previewId: number = filteredOptions[activeOptionIdx > 0\r\n        ? activeOptionIdx - 1\r\n        : 0].id\r\n      const currentId: number = filteredOptions[activeOptionIdx].id\r\n      const nextId: number = filteredOptions[activeOptionIdx\r\n      <= filteredOptions.length - 2\r\n        ? activeOptionIdx + 1\r\n        : activeOptionIdx].id\r\n\r\n      return [ previewId, currentId, nextId ]\r\n    }\r\n\r\n    return [ 0, 0, 0 ]\r\n  }\r\n\r\n  return (\r\n    <div\r\n      key={ id }\r\n      className='multi-select'\r\n      tabIndex={ 0 }\r\n      onKeyDown={ (e) => handlePressKey(e,\r\n        id,\r\n        findActiveOptionAndNeighbours()) }\r\n    >\r\n      <div className='selected-options-box'>\r\n        { selectedOptionsList.map((select) => select.id === id\r\n          && select.options.map(( option ) =>\r\n          <OptionPill\r\n            key={ option.id }\r\n            selectId={ id }\r\n            optionId={ option.id }\r\n            value={ option.value }\r\n            handleRemoveSelectedOption={ handleRemoveSelectedOption }\r\n          />\r\n        )) }\r\n\r\n        <CustomInput\r\n          name={ name }\r\n          handleChange={ handleChange }\r\n          selectId={ id }\r\n          value={ inputValue[id].value }\r\n          onFocus={ (e) => handleFocusInput(e, id) }\r\n          onBlur={ (e) => handleBlur(e, id) }\r\n          fixedLabel={ !!selectedOptionsList[id]?.options.length }\r\n        >\r\n\r\n          { hidden ? null :\r\n            <OptionsList\r\n              selectId={ id }\r\n              options={ filteredOptions }\r\n              handleSelectOption={ handleSelectOption }\r\n              handleSetActive={ handleSetActive }\r\n              handleBlur={ handleBlur }\r\n            />\r\n          }\r\n        </CustomInput>\r\n      </div>\r\n      <div className=\"control-box\">\r\n        { selectedOptionsList[id]?.options.length\r\n        || inputValue[id].value.trim() ?\r\n          <CustomButton\r\n            className='btn-remove'\r\n            onClick={ (e) => handleClearInput(e, id) }\r\n          >\r\n            &times;\r\n          </CustomButton>\r\n          : null }\r\n\r\n        <CustomButton\r\n          className='btn-toggle'\r\n          onClick={ (e) => handleToggleOptionsList(e, id) }\r\n          onBlur={ (e) => handleBlur(e, id)}\r\n        >\r\n          &#9207;\r\n        </CustomButton>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default MultiSelect\r\n","import MultiSelect from './MultiSelect'\r\nimport './MultiSelect.scss'\r\n\r\nexport default MultiSelect\r\n","import React, {\r\n  ChangeEvent,\r\n  FC,\r\n  FocusEvent,\r\n  KeyboardEvent,\r\n  MouseEvent,\r\n  ReactNode,\r\n  useState\r\n} from 'react'\r\nimport {\r\n  InputValue,\r\n  MultiSelectElement,\r\n  SelectedElement,\r\n  Option,\r\n  SelectData\r\n} from '../../models'\r\nimport {\r\n  Button,\r\n  initializeInputValues,\r\n  initializeSelectedList,\r\n  initializeMultiSelects,\r\n  filterArrays\r\n} from '../../utils'\r\n\r\nimport MultiSelectAddForm from '../multiselect-add-form'\r\nimport CustomButton from '../../components/custom-button'\r\nimport MultiSelect from '../multiselect'\r\n\r\ninterface IProps {\r\n  children: ReactNode\r\n  data: SelectData[]\r\n}\r\n\r\nconst MultiSelectsBox: FC<IProps> = ({ children, data }) => {\r\n  const [ multiSelectsList, setMultiSelectsList ] = useState<MultiSelectElement[]>(initializeMultiSelects(data))\r\n  const [ selectedOptionsList, setSelectedOptionsList ] = useState<SelectedElement[]>(initializeSelectedList(multiSelectsList))\r\n  const [ inputValue, setInputValue ] = useState<InputValue[]>(initializeInputValues(multiSelectsList))\r\n  const [ hideAddForm, setHideAddForm ] = useState<boolean>(true)\r\n\r\n  const toggleOptionsList = (selectId: number, isHidden: boolean = true): void => {\r\n    const currentSelect: MultiSelectElement[] = [ ...multiSelectsList ]\r\n    currentSelect[selectId].hidden = isHidden\r\n    setMultiSelectsList(multiSelectsList.map((select) => ({\r\n      ...select,\r\n      hidden: select.id === selectId ? isHidden : true\r\n    })))\r\n  }\r\n\r\n  const clearInputValues = (): void => {\r\n    const currentValuesList: InputValue[] = inputValue.map(({ id }) => ({\r\n      id,\r\n      value: ''\r\n    }))\r\n    setInputValue(currentValuesList)\r\n  }\r\n\r\n  const activateOption = (selectId: number, optionId: number): void => {\r\n    const currentSelectsList: MultiSelectElement[] = [ ...multiSelectsList ]\r\n    currentSelectsList[selectId].options\r\n      .map((option) => option.isActive = option.id === optionId)\r\n    setMultiSelectsList(currentSelectsList)\r\n  }\r\n\r\n  const addOptionToSelected = (selectId: number, optionId: number): void => {\r\n    setSelectedOptionsList(selectedOptionsList\r\n      .map((select) => (select.id === selectId\r\n          ? {\r\n            id: selectId,\r\n            options: [\r\n              ...select.options,\r\n              multiSelectsList[selectId].options[optionId]\r\n            ]\r\n          }\r\n          : select\r\n      ))\r\n    )\r\n\r\n    clearInputValues()\r\n  }\r\n\r\n  const moveOnTheOptionsList = (selectId: number,\r\n                                neighbors: number[],\r\n                                keyCode: number): void => {\r\n    const [ previewOption, currentOption, nextOption ]: number[] = neighbors\r\n    const currentSelectsList: MultiSelectElement[] = [ ...multiSelectsList ]\r\n\r\n    if (keyCode === Button.Up && previewOption !== currentOption) {\r\n      currentSelectsList[selectId].options[previewOption].isActive = true\r\n      currentSelectsList[selectId].options[currentOption].isActive = false\r\n    }\r\n\r\n    if (keyCode === Button.Down && nextOption !== currentOption) {\r\n      currentSelectsList[selectId].options[nextOption].isActive = true\r\n      currentSelectsList[selectId].options[currentOption].isActive = false\r\n    }\r\n\r\n    setMultiSelectsList(currentSelectsList)\r\n  }\r\n\r\n  const removeLastSelectedOption = (selectId: number): void => {\r\n    const currentSelectedOptionsList: SelectedElement[] = [ ...selectedOptionsList ]\r\n    currentSelectedOptionsList[selectId].options.pop()\r\n    setSelectedOptionsList(currentSelectedOptionsList)\r\n  }\r\n\r\n  const addNewMultiSelect = (newSelect: MultiSelectElement): void => {\r\n    setInputValue([ ...inputValue, { id: newSelect.id, value: '' } ])\r\n    setSelectedOptionsList([ ...selectedOptionsList, { id: newSelect.id, options: [] } ])\r\n    setMultiSelectsList([ ...multiSelectsList, newSelect ])\r\n    setHideAddForm(true)\r\n  }\r\n\r\n  const handleFocusInput = (e: ChangeEvent<HTMLInputElement>,\r\n                            selectId: number): void => {\r\n    toggleOptionsList(selectId, false)\r\n  }\r\n\r\n  const handleBlur = (e: FocusEvent<HTMLUListElement\r\n    | HTMLInputElement\r\n    | HTMLButtonElement>, selectId: number): void => {\r\n    if (e.relatedTarget === null\r\n    ) toggleOptionsList(selectId)\r\n  }\r\n\r\n  const handleToggleOptionsList = (e: MouseEvent<HTMLButtonElement>,\r\n                                   optionId: number): void => {\r\n    e.preventDefault()\r\n    setMultiSelectsList(multiSelectsList.map(({\r\n                                                id,\r\n                                                hidden,\r\n                                                ...values\r\n                                              }) => ({\r\n      id,\r\n      hidden: id === optionId ? !hidden : true,\r\n      ...values\r\n    })))\r\n  }\r\n\r\n  const handlePressKey = (e: KeyboardEvent<HTMLDivElement>,\r\n                          selectId: number,\r\n                          neighbors: number[]): void => {\r\n    switch (e.keyCode) {\r\n      case Button.Enter:\r\n        e.preventDefault()\r\n\r\n        if (selectedOptionsList[selectId].options.length\r\n          < multiSelectsList[selectId].options.length) {\r\n          addOptionToSelected(selectId, neighbors[1])\r\n        }\r\n        break\r\n\r\n      case Button.Esc:\r\n        multiSelectsList.map(({ id }) => toggleOptionsList(id))\r\n        break\r\n\r\n      case Button.Up:\r\n        moveOnTheOptionsList(selectId, neighbors, e.keyCode)\r\n        break\r\n\r\n      case Button.Down:\r\n        moveOnTheOptionsList(selectId, neighbors, e.keyCode)\r\n        break\r\n\r\n      case Button.Backspace:\r\n        removeLastSelectedOption(selectId)\r\n        break\r\n    }\r\n  }\r\n\r\n  const handleChange = (e: ChangeEvent<HTMLInputElement>,\r\n                        selectId: number = multiSelectsList.length): void => {\r\n    e.preventDefault()\r\n    setInputValue(inputValue.map(({ id, value }) => ({\r\n      id,\r\n      value: id === selectId\r\n        ? e.target.value\r\n        : value\r\n    })))\r\n  }\r\n\r\n  const handleClearInput = (e: MouseEvent<HTMLButtonElement>, selectId: number): void => {\r\n    e.preventDefault()\r\n    clearInputValues()\r\n\r\n    if (selectedOptionsList.length) {\r\n      const currentSelectedOptionsList: SelectedElement[] = [ ...selectedOptionsList ]\r\n      currentSelectedOptionsList[selectId].options = []\r\n\r\n      const currentSelectsList: MultiSelectElement[] = [ ...multiSelectsList ]\r\n      currentSelectsList[selectId].options.map((option) => option.isActive = false)\r\n\r\n      setSelectedOptionsList(currentSelectedOptionsList)\r\n      setMultiSelectsList(currentSelectsList)\r\n    }\r\n  }\r\n\r\n  const handleSetActive = (e: MouseEvent<HTMLLIElement>,\r\n                           selectId: number,\r\n                           optionId: number): void => {\r\n    activateOption(selectId, optionId)\r\n  }\r\n\r\n  const handleSelectOption = (e: MouseEvent<HTMLLIElement>,\r\n                              selectId: number,\r\n                              optionId: number): void => {\r\n    addOptionToSelected(selectId, optionId)\r\n  }\r\n\r\n  const handleRemoveSelectedOption = (e: MouseEvent<HTMLSpanElement>,\r\n                                      selectId: number,\r\n                                      optionId: number): void => {\r\n    const currentSelectedOptionsList: SelectedElement[] = [ ...selectedOptionsList ]\r\n    currentSelectedOptionsList[selectId].options\r\n      .splice(currentSelectedOptionsList[selectId].options\r\n        .findIndex(({ id }) => id === optionId), 1)\r\n    setSelectedOptionsList(selectedOptionsList)\r\n  }\r\n\r\n  const handleToggleAddForm = (e: MouseEvent<HTMLButtonElement>): void => {\r\n    e.preventDefault()\r\n    setHideAddForm(!hideAddForm)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      { multiSelectsList.map(({\r\n                                id,\r\n                                name,\r\n                                options,\r\n                                hidden\r\n                              }) => {\r\n        const filteredOptions: Option[] = id < selectedOptionsList.length\r\n          ? filterArrays(options, selectedOptionsList[id].options)\r\n          : options\r\n        return (\r\n          <MultiSelect\r\n            key={ id }\r\n            id={ id }\r\n            name={ name }\r\n            selectedOptionsList={ selectedOptionsList }\r\n            options={ filteredOptions }\r\n            hidden={ hidden }\r\n            handleChange={ handleChange }\r\n            inputValue={ inputValue }\r\n            handleToggleOptionsList={ handleToggleOptionsList }\r\n            handleFocusInput={ handleFocusInput }\r\n            handlePressKey={ handlePressKey }\r\n            handleClearInput={ handleClearInput }\r\n            handleSelectOption={ handleSelectOption }\r\n            handleSetActive={ handleSetActive }\r\n            handleRemoveSelectedOption={ handleRemoveSelectedOption }\r\n            handleBlur={ handleBlur }\r\n          />\r\n        )\r\n      }) }\r\n\r\n      { children }\r\n\r\n      <CustomButton\r\n        className='btn-add-select'\r\n        onClick={ handleToggleAddForm }\r\n      >\r\n        { hideAddForm ? 'NEW SELECT' : 'CLOSE' }\r\n      </CustomButton>\r\n\r\n      <MultiSelectAddForm\r\n        newSelectId={ multiSelectsList.length }\r\n        hideAddForm={ hideAddForm }\r\n        addNewMultiSelect={ addNewMultiSelect }\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MultiSelectsBox\r\n","import MultiSelectsBox from './MultiSelectsBox'\r\nimport './MultiSelectsBox.scss'\r\n\r\nexport default MultiSelectsBox\r\n","import { SelectData } from './models'\r\n\r\nconst data: SelectData[] = [\r\n  {\r\n    name: 'Language',\r\n    options: [ 'English', 'Russian', 'French', 'Spanish', 'Italian', 'Hindi' ],\r\n  },\r\n  {\r\n    name: 'Country',\r\n    options: [ 'USA', 'Russia', 'India', 'Germany', 'Poland',  'Norway', 'Canada' ]\r\n  }\r\n]\r\n\r\nexport default data\r\n","import React, { FC } from 'react'\n\nimport MultiSelectsBox from './containers/multiselects-box'\n\nimport './App.scss'\nimport data from './data'\nimport CustomButton from './components/custom-button'\n\nconst App: FC = () => (\n  <div className='app'>\n    <header className='header'>\n      <h2 className='header__title'>CUSTOM DROPDOWN</h2>\n    </header>\n    <main>\n      <form className='form' onSubmit={ (e) => e.preventDefault() }>\n        <MultiSelectsBox data={ data }>\n\n          <CustomButton\n            className='form__btn--submit'\n            type='submit'\n          >\n            SUBMIT\n          </CustomButton>\n        </MultiSelectsBox>\n      </form>\n    </main>\n  </div>\n)\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.scss';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}